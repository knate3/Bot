const fs = require('fs');const Discord = require('discord.js');const { prefix, token, ownerID } = require('./config.json');const client = new Discord.Client();client.commands = new Discord.Collection();const klaw = require("klaw");const path = require("path");const commandFiles = fs.readdirSync('./commands');for (const file of commandFiles) {	const command = require(`./commands/${file}`);	client.commands.set(command.name, command);}const cooldowns = new Discord.Collection();//By knate3#9781client.on('message', message => {	if (!message.content.startsWith(prefix) || message.author.bot) return;	const args = message.content.slice(prefix.length).split(/ +/);	const commandName = args.shift().toLowerCase();	const command = client.commands.get(commandName)		|| client.commands.find(cmd => cmd.aliases && cmd.aliases.includes(commandName));	if (!command) return;	if (command.guildOnly && message.channel.type !== 'text') {		return message.reply('I can\'t execute that command inside DMs!');	}if(command.owner){	if(message.author.id !== ownerID) return message.channel.send('Sorry your not the owner.')}	if (!cooldowns.has(command.name)) {		cooldowns.set(command.name, new Discord.Collection());	}	const now = Date.now();	const timestamps = cooldowns.get(command.name);	const cooldownAmount = (command.cooldown || 3) * 1000;	if (!timestamps.has(message.author.id)) {		timestamps.set(message.author.id, now);		setTimeout(() => timestamps.delete(message.author.id), cooldownAmount);	}	else {		const expirationTime = timestamps.get(message.author.id) + cooldownAmount;		if (now < expirationTime) {			const timeLeft = (expirationTime - now) / 1000;			return message.reply(`please wait ${timeLeft.toFixed(1)} more second(s) before reusing the \`${command.name}\` command.`);		}		timestamps.set(message.author.id, now);		setTimeout(() => timestamps.delete(message.author.id), cooldownAmount);	}	try {		command.execute(client, message, args);	}	catch (error) {		console.error(error);		message.reply('there was an error trying to execute that command!');	}}); const eventList = [];  klaw("./events").on("data", (item) => {      const eventFile = path.parse(item.path);    if (!eventFile.ext || eventFile.ext !== ".js") return;    const eventName = eventFile.name.split(".")[0];    try {      const event = new (require(`${eventFile.dir}${path.sep}${eventFile.name}${eventFile.ext}`))(client);          eventList.push(event);            client.on(eventName, (...args) => event.run(...args));      delete require.cache[require.resolve(`${eventFile.dir}${path.sep}${eventFile.name}${eventFile.ext}`)];    } catch (error) {        console.log(`Error loading event ${eventFile.name}: ${error}`);    }  }).on("end", () => {    console.log(`Loaded a total of ${eventList.length} events.`);  }).on("error", (error) =>   console.log(error));client.login(token);